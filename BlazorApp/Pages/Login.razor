
@page "/login"
@layout AuthLayout
@using System.ComponentModel.DataAnnotations
@using Shared.Types
@inject NavigationManager Nav
@inject IAuthService AuthService

<EditForm Model="model" OnValidSubmit="OnSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="auth-card">
        <div class="login-header">
            <img src="favicon.png" alt="logo" style="width:48px;height:48px" />
            <h4>Academia — Iniciar sesión</h4>
        </div>

        <div class="form-row">
            <input class="input" placeholder="Usuario" @bind="model.Username" />
            <ValidationMessage For="@(() => model.Username)" />
        </div>

        <div class="form-row" style="position:relative">
            <input class="input" placeholder="Contraseña" type="@(showPassword ? "text" : "password")" @bind="model.Password" />
            <button type="button" class="btn-ghost" style="position:absolute; right:8px; top:8px;" @onclick="TogglePassword">@((showPassword) ? "🙈" : "👁")</button>
            <ValidationMessage For="@(() => model.Password)" />
        </div>

        <div class="top-row">
            <button class="btn" type="submit" disabled="@(isLoading)">@(isLoading ? "Cargando..." : "Ingresar")</button>
            <button class="btn-ghost" type="button" @onclick=@(() => Nav.NavigateTo("/", true))>Cancelar</button>
        </div>

        @if (!string.IsNullOrEmpty(error))
        {
            <div class="alert alert-danger mt-2">@error</div>
        }
    </div>
</EditForm>

@code {
    private LoginModel model = new();
    private bool showPassword;
    private bool isLoading;
    private string? error;

    protected override async Task OnInitializedAsync()
    {
        if (await AuthService.IsAuthenticatedAsync())
        {
            var user = await AuthService.GetCurrentUserAsync();
            if (user != null && user.TypeUser == UserType.Admin)
                Nav.NavigateTo("/admin/users");
            else if (user != null && user.TypeUser == UserType.Teacher)
                Nav.NavigateTo("/teacher/grades");
            else if (user != null && user.TypeUser == UserType.Student)
                Nav.NavigateTo("/student/enroll");
            else
                Nav.NavigateTo("/dashboard");
        }
    }

    private void TogglePassword() => showPassword = !showPassword;

    private async Task OnSubmit()
    {
        error = null;
        isLoading = true;
        try
        {
            var success = await AuthService.LoginAsync(model.Username, model.Password);
            if (!success)
            {
                error = "Usuario o contraseña incorrectos.";
                return;
            }

            var user = await AuthService.GetCurrentUserAsync();
            if (user != null && user.TypeUser == UserType.Admin)
                Nav.NavigateTo("/admin/users");
            else if (user != null && user.TypeUser == UserType.Teacher)
                Nav.NavigateTo("/teacher/grades");
            else if (user != null && user.TypeUser == UserType.Student)
                Nav.NavigateTo("/student/enroll");
            else
                Nav.NavigateTo("/dashboard");
        }
        catch (Exception ex)
        {
            error = "Ocurrió un error: " + ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "El usuario es requerido")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "La contraseña es requerida")]
        public string Password { get; set; } = string.Empty;
    }
}