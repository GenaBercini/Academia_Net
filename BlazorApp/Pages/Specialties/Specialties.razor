@page "/admin/specialties"
@layout AdminLayout
@using DTOs
@inject NavigationManager Nav

<h3 class="card">Especialidades</h3>

<div class="card">
    <div class="top-row">
        <div><button class="btn" @onclick="Create">Nueva especialidad</button></div>
    </div>

    @if (specialties == null)
    {
        <p>Cargando...</p>
    }
    else
    {
        <table class="table">
            <thead><tr><th>Id</th><th>Descripción</th><th>Duración</th><th>Acciones</th></tr></thead>
            <tbody>
                @foreach (var s in specialties)
                {
                    <tr>
                        <td>@s.Id</td>
                        <td>@s.DescEspecialidad</td>
                        <td>@s.DuracionAnios</td>
                        <td class="actions">
                            <button @onclick="() => Edit(s.Id)">Editar</button>
                            <button @onclick="() => Delete(s.Id)">Eliminar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    private List<SpecialtyDTO>? specialties;

    protected override async Task OnInitializedAsync()
    {
        specialties = (await API.Clients.SpecialtiesApiClient.GetAllAsync())?.ToList();
    }

    void Create() => Nav.NavigateTo("/admin/specialties/create");
    void Edit(int id) => Nav.NavigateTo($"/admin/specialties/{id}");
    async Task Delete(int id)
    {
        var ok = await JS.InvokeAsync<bool>("confirm", $"Eliminar especialidad #{id}?");
        if (!ok) return;
        await API.Clients.SpecialtiesApiClient.DeleteAsync(id);
        specialties = (await API.Clients.SpecialtiesApiClient.GetAllAsync())?.ToList();
    }

    [Inject] IJSRuntime JS { get; set; } = default!;
}
