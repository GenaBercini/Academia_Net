@inherits LayoutComponentBase
@using Shared.Types
@inject IAuthService AuthService
@inject NavigationManager Nav

<div class="app-container d-flex">
    <nav class="sidebar @NavMenuCssClass">
        <div class="sidebar-header" @onclick="ToggleNavMenu">
            <img src="favicon.png" class="logo" alt="logo" />
            <h4>Academia</h4>
            <p>Sistema Académico</p>
        </div>

        <hr class="divider" />

        <div class="nav-links">
            @if (isLoading)
            {
                <p class="text-center text-light">Cargando...</p>
            }
            else
            {
                <NavLinkItem Href="@HomePorRol()" Icon="bi bi-house-door-fill" Label="Home" />

                @* Links dinámicos según rol *@
                @foreach (var link in RolLinks)
                {
                    <NavLinkItem Href="@link.Href" Icon="@link.Icon" Label="@link.Label" />
                }

                <hr class="divider" />

                <button class="nav-link text-danger" @onclick="CerrarSesion">
                    <i class="bi bi-box-arrow-right"></i>
                    <span>Cerrar sesión</span>
                </button>
            }
        </div>

        <div class="sidebar-footer">
            <p>© 2025 Academia</p>
        </div>
    </nav>

    <main class="content flex-grow-1 p-4" style="@($"margin-left:{sidebarWidth}px;")">
        <div class="top-row d-flex justify-content-end align-items-center mb-4">
            <a href="https://learn.microsoft.com/aspnet/core/" target="_blank" class="text-decoration-none text-secondary">
                <i class="bi bi-info-circle me-1"></i> About
            </a>
        </div>

        <article>
            @Body
        </article>
    </main>
</div>

@code {
    private bool collapseNavMenu = false;
    private bool isLoading = true;
    private UserType? rolUsuario;
    private int sidebarWidth = 230;

    private List<NavLinkItemData> RolLinks = new();

    [Parameter] public EventCallback<bool> OnToggle { get; set; }
    private string? NavMenuCssClass => collapseNavMenu ? "collapsed" : "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!await AuthService.IsAuthenticatedAsync())
            {
                Nav.NavigateTo("/login");
                return;
            }

            var user = await AuthService.GetCurrentUserAsync();
            rolUsuario = user?.TypeUser;

            if (rolUsuario == null)
            {
                await AuthService.LogoutAsync();
                Nav.NavigateTo("/login");
                return;
            }

            RolLinks = ObtenerLinksPorRol(rolUsuario.Value);
        }
        catch
        {
            await AuthService.LogoutAsync();
            Nav.NavigateTo("/login");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
        sidebarWidth = collapseNavMenu ? 70 : 230;
        await OnToggle.InvokeAsync(collapseNavMenu);
    }

    private async Task CerrarSesion()
    {
        await AuthService.LogoutAsync();
        Nav.NavigateTo("/login", true);
    }

    private string HomePorRol() => rolUsuario switch
    {
        UserType.Student => "/dashboard-student",
        UserType.Teacher => "/dashboard-teacher",
        UserType.Admin => "/dashboard-admin",
        _ => "/login"
    };

    private List<NavLinkItemData> ObtenerLinksPorRol(UserType rol)
    {
        return rol switch
        {
            UserType.Student => new List<NavLinkItemData>
            {
                new("/cursos-disponibles", "bi bi-journal-bookmark-fill", "Cursos disponibles"),
                new("/mis-inscripciones", "bi bi-list-check", "Mis inscripciones"),
                new("/mis-notas", "bi bi-bar-chart-fill", "Mis notas")
            },
            UserType.Teacher => new List<NavLinkItemData>
            {
                new("/cursos-asignadas", "bi bi-journal-text", "Cursos asignados")
            },
            UserType.Admin => new List<NavLinkItemData>
            {
                new("/gestion-usuarios", "bi bi-person-gear", "Gestión de usuarios"),
                new("/profesores", "bi bi-mortarboard-fill", "Profesores"),
                new("/especialidades", "bi bi-award-fill", "Especialidades"),
                new("/planes", "bi bi-diagram-3-fill", "Planes"),
                new("/cursos", "bi bi-journal-bookmark-fill", "Cursos"),
                new("/materias", "bi bi-book-half", "Materias")
            },
            _ => new List<NavLinkItemData>()
        };
    }

    private record NavLinkItemData(string Href, string Icon, string Label);
}
